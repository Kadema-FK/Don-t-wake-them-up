[gd_scene load_steps=9 format=3 uid="uid://mlhgidq1ow1b"]

[ext_resource type="Texture2D" uid="uid://bg4m4qiu0lj2t" path="res://Assets/Images/Background/plansza_empty_sketch.png" id="2_jqufn"]
[ext_resource type="PackedScene" uid="uid://cwkx4xqfoj1tr" path="res://Scenes/window_obs.tscn" id="3_ecayh"]
[ext_resource type="Texture2D" uid="uid://con40ybx8212b" path="res://Assets/Images/Background/plansza_SKETCH.png" id="3_hjj7f"]
[ext_resource type="PackedScene" path="res://Scenes/boogeyman_obs.tscn" id="4_yshmp"]
[ext_resource type="PackedScene" uid="uid://bmnkyni2tl0cn" path="res://Scenes/cat_obs.tscn" id="5_tt8u4"]
[ext_resource type="PackedScene" path="res://Scenes/clock_obs.tscn" id="6_mof2p"]
[ext_resource type="PackedScene" uid="uid://cy6wom821tjvy" path="res://Scenes/dog_obs.tscn" id="7_qgjty"]

[sub_resource type="GDScript" id="GDScript_1epx3"]
script/source = "extends Node2D

var day = 6;
const eventTimeMinMax = [[5,8], [4,7], [3,6]]
var eventsInHour0 = [0,0];
var hour = 0;
const sInHour = 20;
@onready var obstacles = [$Cat, $Dog, $Window, $Boogeyman];


var rng; #random numer generator

# Called when the node enters the scene tree for the first time.
func _ready():	
	rng = RandomNumberGenerator.new();
	eventsInHour0[0] = rng.randi_range(0,1);
	eventsInHour0[1] = rng.randi_range(2,obstacles.size()-1);
	resetEventTimer(eventTimeMinMax[0][0], eventTimeMinMax[0][1]);
	$GameTimer.start(sInHour);
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func resetEventTimer(start, end):
	var time = rng.randf_range(start, end);
	print (\"New time: \" + str(time));
	$EventTimer.start(time);

func _on_game_timer_timeout():
	hour += 1;
	pass # Replace with function body.


func _on_event_timer_timeout():
	var number;
	if hour == 0:
		number = eventsInHour0[rng.randi_range(0,1)];
	else:
		number = rng.randi_range(0,obstacles.size()-1);
	print(\"Number \"+str(number))
	obstacles[number].start();
	var maks_array = eventTimeMinMax.size()-1;
	if hour < maks_array:
		resetEventTimer(eventTimeMinMax[hour][0], eventTimeMinMax[hour][1]);
	else:
		resetEventTimer(eventTimeMinMax[maks_array][0], eventTimeMinMax[maks_array][1]);
	pass # Replace with function body.
"

[node name="Game" type="Node2D"]
script = SubResource("GDScript_1epx3")

[node name="PlanszaEmptySketch" type="Sprite2D" parent="."]
texture = ExtResource("2_jqufn")
centered = false

[node name="PlanszaSketch" type="Sprite2D" parent="."]
visible = false
texture = ExtResource("3_hjj7f")
centered = false

[node name="Test_Clock" type="Label" parent="."]
offset_left = 41.0
offset_top = 1027.0
offset_right = 282.0
offset_bottom = 1053.0
text = "Test"

[node name="GameTimer" type="Timer" parent="."]
wait_time = 120.0

[node name="EventTimer" type="Timer" parent="."]

[node name="Window" parent="." instance=ExtResource("3_ecayh")]
position = Vector2(1556, 170)
scale = Vector2(2.28, 2.28)

[node name="Boogeyman" parent="." instance=ExtResource("4_yshmp")]
position = Vector2(1006, 730)

[node name="Cat" parent="." instance=ExtResource("5_tt8u4")]

[node name="Clock" parent="." instance=ExtResource("6_mof2p")]
position = Vector2(845, 383)

[node name="Dog" parent="." instance=ExtResource("7_qgjty")]
position = Vector2(733, 920)

[connection signal="timeout" from="GameTimer" to="." method="_on_game_timer_timeout"]
[connection signal="timeout" from="EventTimer" to="." method="_on_event_timer_timeout"]
